<?php

namespace WPGMZA;

$dir = preg_replace('/wp-google-maps-pro/', 'wp-google-maps', __DIR__);

require_once(plugin_dir_path($dir) . 'includes/class.factory.php');
require_once(plugin_dir_path($dir) . 'includes/class.marker-filter.php');

class ProMarkerFilter extends MarkerFilter
{
	protected $_keywords;
	protected $_categories;
	protected $_map_id;
	protected $_mashupIDs;
	protected $_customFields;
	
	public function __construct($options=null)
	{
		MarkerFilter::__construct($options);
	}
	
	public function __get($name)
	{
		if(property_exists($this, "_$name"))
			return $this->{"_$name"};
		
		return $this->{$name};
	}
	
	public function __set($name, $value)
	{
		MarkerFilter::__set($name, $value);
		
		switch($name)
		{
			case "map_id":
				$this->loadMap();
				break;
		}
	}
	
	protected function loadMap()
	{
		$this->map = new Map($this->_map_id);
	}
	
	protected function applyKeywordsClause($query)
	{
		global $wpdb;
		
		if(!$this->_keywords)
			return;
		
		$keywords = '%' . $wpdb->esc_like("{$this->_keywords}") . '%';
		
		$query->where['keywords'] = "
			(
				title LIKE %s
				OR
				description LIKE %s
				OR
				address LIKE %s
			)
		";
		
		$query->params[] = $keywords;
		$query->params[] = $keywords;
		$query->params[] = $keywords;
	}
	
	protected function applyMapIDClause($query)
	{
		if(!empty($this->_mashupIDs))
		{
			$ids = array_merge($this->_mashupIDs);
			
			if(!empty($this->_map_id))
				$ids[] = $this->_map_id;
			
			$placeholders = implode(',', array_fill(0, count($ids), "%d"));
			
			$query->where['mashup_ids'] = "map_id IN ($placeholders)";
			
			foreach($ids as $id)
				$query->params[] = $id;
				
			return;
		}
		
		if(!empty($this->_map_id))
		{
			$query->where['map_id'] = 'map_id = %d';
			$query->params[] = $this->_map_id;
		}
	}
	
	/*protected function applyKeywordsClause($query)
	{
		global $wpdb;
		global $mapBlockPlugin;
		
		if(!ProMarkerFilter::$cachedSearchableColumnsByTableName)
			ProMarkerFilter::$cachedSearchableColumnsByTableName = array();
		
		$tableName = $this->getTableName();
		
		if(!isset(ProMarkerFilter::$cachedSearchableColumnsByTableName[$tableName]))
		{
			ProMarkerFilter::$cachedSearchableColumnsByTableName[$tableName] = array();
			
			$columns = $wpdb->get_results("SHOW COLUMNS FROM $tableName");
			
			foreach($columns as $col)
			{
				if(preg_match('/varchar|text/i', $col->Type))
					ProMarkerFilter::$cachedSearchableColumnsByTableName[$tableName][] = $col->Field;
			}
		}
		
		$keywords = $this->keywords;
		
		if(empty($keywords))
			return;
		
		$operator = "LIKE";
		
		if($this->_map->keyword_filter_enable_regular_expressions)
		{
			// Only allow the REGEXP operator if keywords is a valid regular expression
			if(preg_match($keywords, null) !== false)
				$operator = "REGEXP";
		}
		
		$columns = ProMarkerFilter::$cachedSearchableColumnsByTableName[$tableName];
		$columns = array_map(function($input) {
			return "`$input` LIKE %s";
		}, $columns);
		
		$like = '%' . $wpdb->esc_like("{$keywords}") . '%';
		
		$query->where['keywords'] = "
			(
				" . implode(' OR ', $columns) . "
			)
		";
		
		for($i = 0; $i < count($columns); $i++)
			$query->params[] = $like;
	}*/
	
	protected function applyCategoriesClause($query)
	{
		global $wpdb;
		global $wpgmza;
		
		$hasTableName	= $wpdb->prefix . "wpgmza_markers_has_categories";
		$categories		= $this->categories;
		
		if(empty($categories))
			return;
		
		if(is_int($categories))
			$categories = array($categories);
		
		$placeholders	= implode(',', array_fill(0, count($categories), '%d'));
		
		if(empty($categories))
			return;
		
		switch($wpgmza->settings->wpgmza_settings_cat_logic)
		{
			case "1":
				$operator = "AND";
				break;
				
			default:
				$operator = "OR";
				break;
		}
		
		$categoryTree = new CategoryTree();
		$categoryIDs = array();
		
		foreach($categories as $category)
		{
			$categoryIDs[] = $category;
			
			$node = $categoryTree->getChildByID($category);
			
			if(!$node)
				continue;
			
			foreach($node->getDescendants() as $descendant)
				$categoryIDs[] = $descendant->id;
		}
		
		$imploded = implode(',', array_unique($categoryIDs));
		
		$queries = array();
		
		for($i = 0; $i < count($categoryIDs); $i++)
		{
			$queries[] = "
				id IN 
				(
					SELECT marker_id
					FROM {$wpdb->prefix}wpgmza_markers_has_categories
					WHERE category_id = %d
				)
			";
			
			$query->params[] = $categoryIDs[$i];
		}
		
		$query->where['categories'] = "(" . implode(" $operator ", $queries) . ")";
	}
	
	protected function applyCustomFieldClause($query)
	{
		if(empty($this->_customFields))
			return;
		
		// TODO: This will not work for mashups
		$controller = apply_filters('wpgmza_get_custom_field_filter_controlller', array(
			'map_id'		=> $this->_map_id,
			'widgetData' 	=> $this->_customFields
		));
		
		$markerIDs = $controller->getFilteredMarkerIDs();
		$imploded = implode(', ', array_map('intval', $markerIDs));
		
		if(empty($markerIDs))
			$query->where['custom_fields'] = '0';
		else
			$query->where['custom_fields'] = "(id IN ($imploded))";
	}
	
	public function getQuery()
	{
		$query = MarkerFilter::getQuery();
		
		$this->applyMapIDClause($query);
		$this->applyKeywordsClause($query);
		$this->applyCategoriesClause($query);
		$this->applyCustomFieldClause($query);
		
		return $query;
	}
}

add_filter('wpgmza_create_WPGMZA\\MarkerFilter', function($options) {
	
	return new ProMarkerFilter($options);
	
}, 10, 1);
